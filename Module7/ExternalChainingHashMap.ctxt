#BlueJ class context
comment0.target=ExternalChainingHashMap
comment0.text=\r\n\ Your\ implementation\ of\ a\ ExternalChainingHashMap.\r\n
comment1.params=
comment1.target=ExternalChainingHashMap()
comment1.text=\r\n\ Constructs\ a\ new\ ExternalChainingHashMap\ with\ an\ initial\ capacity\ of\ INITIAL_CAPACITY.\r\n
comment2.params=key\ value
comment2.target=java.lang.Object\ put(java.lang.Object,\ java.lang.Object)
comment2.text=\r\n\ Adds\ the\ given\ key-value\ pair\ to\ the\ map.\ If\ an\ entry\ in\ the\ map\r\n\ already\ has\ this\ key,\ replace\ the\ entry's\ value\ with\ the\ new\ one\r\n\ passed\ in.\r\n\r\n\ In\ the\ case\ of\ a\ collision,\ use\ external\ chaining\ as\ your\ resolution\r\n\ strategy.\ Add\ new\ entries\ to\ the\ front\ of\ an\ existing\ chain,\ but\ don't\r\n\ forget\ to\ check\ the\ entire\ chain\ for\ duplicate\ keys\ first.\r\n\r\n\ If\ you\ find\ a\ duplicate\ key,\ then\ replace\ the\ entry's\ value\ with\ the\ new\r\n\ one\ passed\ in.\ When\ replacing\ the\ old\ value,\ replace\ it\ at\ that\ position\r\n\ in\ the\ chain,\ not\ by\ creating\ a\ new\ entry\ and\ adding\ it\ to\ the\ front.\r\n\r\n\ Before\ actually\ adding\ any\ data\ to\ the\ HashMap,\ you\ should\ check\ to\r\n\ see\ if\ the\ table\ would\ violate\ the\ max\ load\ factor\ if\ the\ data\ was\r\n\ added.\ Resize\ if\ the\ load\ factor\ (LF)\ is\ greater\ than\ max\ LF\ (it\ is\r\n\ okay\ if\ the\ load\ factor\ is\ equal\ to\ max\ LF).\ For\ example,\ let's\ say\r\n\ the\ table\ is\ of\ length\ 5\ and\ the\ current\ size\ is\ 3\ (LF\ \=\ 0.6).\ For\r\n\ this\ example,\ assume\ that\ no\ elements\ are\ removed\ in\ between\ steps.\r\n\ If\ another\ entry\ is\ attempted\ to\ be\ added,\ before\ doing\ anything\ else,\r\n\ you\ should\ check\ whether\ (3\ +\ 1)\ /\ 5\ \=\ 0.8\ is\ larger\ than\ the\ max\ LF.\r\n\ It\ is,\ so\ you\ would\ trigger\ a\ resize\ before\ you\ even\ attempt\ to\ add\r\n\ the\ data\ or\ figure\ out\ if\ it's\ a\ duplicate.\ Be\ careful\ to\ consider\ the\r\n\ differences\ between\ integer\ and\ double\ division\ when\ calculating\ load\r\n\ factor.\r\n\r\n\ When\ regrowing,\ resize\ the\ length\ of\ the\ backing\ table\ to\r\n\ (2\ *\ old\ length)\ +\ 1.\ You\ should\ use\ the\ resizeBackingTable\ method\ to\ do\ so.\r\n\r\n\ @param\ key\ \ \ The\ key\ to\ add.\r\n\ @param\ value\ The\ value\ to\ add.\r\n\ @return\ null\ if\ the\ key\ was\ not\ already\ in\ the\ map.\ If\ it\ was\ in\ the\r\n\ \ \ \ \ \ \ \ \ map,\ return\ the\ old\ value\ associated\ with\ it.\r\n\ @throws\ java.lang.IllegalArgumentException\ If\ key\ or\ value\ is\ null.\r\n
comment3.params=key
comment3.target=int\ getHashIndex(java.lang.Object)
comment4.params=key
comment4.target=java.lang.Object\ remove(java.lang.Object)
comment4.text=\r\n\ Removes\ the\ entry\ with\ a\ matching\ key\ from\ the\ map.\r\n\r\n\ @param\ key\ The\ key\ to\ remove.\r\n\ @return\ The\ value\ associated\ with\ the\ key.\r\n\ @throws\ java.lang.IllegalArgumentException\ If\ key\ is\ null.\r\n\ @throws\ java.util.NoSuchElementException\ \ \ If\ the\ key\ is\ not\ in\ the\ map.\r\n
comment5.params=length
comment5.target=void\ resizeBackingTable(int)
comment5.text=\r\n\ Helper\ method\ stub\ for\ resizing\ the\ backing\ table\ to\ length.\r\n\r\n\ This\ method\ should\ be\ called\ in\ put()\ if\ the\ backing\ table\ needs\ to\r\n\ be\ resized.\r\n\r\n\ You\ should\ iterate\ over\ the\ old\ table\ in\ order\ of\ increasing\ index\ and\r\n\ add\ entries\ to\ the\ new\ table\ in\ the\ order\ in\ which\ they\ are\ traversed.\r\n\r\n\ Since\ resizing\ the\ backing\ table\ is\ working\ with\ the\ non-duplicate\r\n\ data\ already\ in\ the\ table,\ you\ won't\ need\ to\ explicitly\ check\ for\r\n\ duplicates.\r\n\r\n\ Hint\:\ You\ cannot\ just\ simply\ copy\ the\ entries\ over\ to\ the\ new\ table.\r\n\r\n\ @param\ Length\ The\ new\ length\ of\ the\ backing\ table.\r\n
comment6.params=key\ value\ newTable
comment6.target=void\ putForResize(java.lang.Object,\ java.lang.Object,\ ExternalChainingMapEntry[])
comment7.params=
comment7.target=ExternalChainingMapEntry[]\ getTable()
comment7.text=\r\n\ Returns\ the\ table\ of\ the\ map.\r\n\r\n\ For\ grading\ purposes\ only.\ You\ shouldn't\ need\ to\ use\ this\ method\ since\r\n\ you\ have\ direct\ access\ to\ the\ variable.\r\n\r\n\ @return\ The\ table\ of\ the\ map.\r\n
comment8.params=
comment8.target=int\ size()
comment8.text=\r\n\ Returns\ the\ size\ of\ the\ map.\r\n\r\n\ For\ grading\ purposes\ only.\ You\ shouldn't\ need\ to\ use\ this\ method\ since\r\n\ you\ have\ direct\ access\ to\ the\ variable.\r\n\r\n\ @return\ The\ size\ of\ the\ map.\r\n
numComments=9
