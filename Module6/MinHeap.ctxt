#BlueJ class context
comment0.target=MinHeap
comment0.text=\r\n\ Your\ implementation\ of\ a\ MinHeap.\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\r\n\ test\ scetion\r\n
comment10.params=index
comment10.target=java.lang.Comparable\ getLeftChild(int)
comment10.text=\r\n\ Gets\ the\ left\ child\ of\ a\ node\ at\ an\ index.\r\n\ @param\ index\ The\ index\ of\ the\ node.\r\n\ @return\ The\ data\ in\ the\ left\ child\ node.\r\n
comment11.params=index
comment11.target=java.lang.Comparable\ getRightChild(int)
comment11.text=\r\n\ Gets\ the\ right\ child\ of\ a\ node\ at\ an\ index.\r\n\ @param\ index\ The\ index\ of\ the\ node.\r\n\ @return\ The\ data\ in\ the\ right\ child\ node.\r\n
comment12.params=
comment12.target=java.lang.Comparable[]\ getBackingArray()
comment12.text=\r\n\ Returns\ the\ backing\ array\ of\ the\ heap.\r\n\r\n\ For\ grading\ purposes\ only.\ You\ shouldn't\ need\ to\ use\ this\ method\ since\r\n\ you\ have\ direct\ access\ to\ the\ variable.\r\n\r\n\ @return\ The\ backing\ array\ of\ the\ list\r\n
comment13.params=
comment13.target=int\ size()
comment13.text=\r\n\ Returns\ the\ size\ of\ the\ heap.\r\n\r\n\ For\ grading\ purposes\ only.\ You\ shouldn't\ need\ to\ use\ this\ method\ since\r\n\ you\ have\ direct\ access\ to\ the\ variable.\r\n\r\n\ @return\ The\ size\ of\ the\ list\r\n
comment2.params=
comment2.target=void\ printHeap()
comment3.params=
comment3.target=MinHeap()
comment3.text=\r\n\ This\ is\ the\ constructor\ that\ constructs\ a\ new\ MinHeap.\r\n\r\n\ Recall\ that\ Java\ does\ not\ allow\ for\ regular\ generic\ array\ creation,\r\n\ so\ instead\ we\ cast\ a\ Comparable[]\ to\ a\ T[]\ to\ get\ the\ generic\ typing.\r\n
comment4.params=data
comment4.target=void\ add(java.lang.Comparable)
comment4.text=\r\n\ Adds\ an\ item\ to\ the\ heap.\ If\ the\ backing\ array\ is\ full\ (except\ for\r\n\ index\ 0)\ and\ you're\ trying\ to\ add\ a\ new\ item,\ then\ double\ its\ capacity.\r\n\r\n\ Method\ should\ run\ in\ amortized\ O(log\ n)\ time.\r\n\r\n\ @param\ data\ The\ data\ to\ add.\r\n\ @throws\ java.lang.IllegalArgumentException\ If\ the\ data\ is\ null.\r\n
comment5.params=
comment5.target=void\ doubleSize()
comment6.params=
comment6.target=void\ heapifyUp()
comment7.params=a\ b
comment7.target=void\ swap(int,\ int)
comment8.params=
comment8.target=java.lang.Comparable\ remove()
comment8.text=\r\n\ Removes\ and\ returns\ the\ min\ item\ of\ the\ heap.\ As\ usual\ for\ array-backed\r\n\ structures,\ be\ sure\ to\ null\ out\ spots\ as\ you\ remove.\ Do\ not\ decrease\ the\r\n\ capacity\ of\ the\ backing\ array.\r\n\r\n\ Method\ should\ run\ in\ O(log\ n)\ time.\r\n\r\n\ @return\ The\ data\ that\ was\ removed.\r\n\ @throws\ java.util.NoSuchElementException\ If\ the\ heap\ is\ empty.\r\n
comment9.params=
comment9.target=void\ heapifyDown()
numComments=14
